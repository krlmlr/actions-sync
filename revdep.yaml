# This workflow creates many jobs, run only when a branch is created
on:
  push:
    branches:
      - "revdep*"

name: rcc dev

jobs:
  R-CMD-check:
    runs-on: ubuntu-18.04

    name: ${{ matrix.package }}

    # Begin custom: services
    # End custom: services

    strategy:
      fail-fast: false
      matrix:
        package:
          #- DBI
          #- DBItest
          - E4tools
          #- MEDITS
          #- RMariaDB
          #- RPostgres
          #- ari
          #- arrow
          #- bigrquery
          - checkr
          #- dbx
          #- dttr2
          #- eatGADS
          #- edeaR
          #- eplusr
          #- extras
          #- feather
          #- gtfsrouter
          #- haven
          - hmstimer
          #- mudata2
          #- odbc
          #- processmapR
          #- progress
          #- ratPASTA
          #- readr
          #- readwritesqlite
          #- rwalkr
          #- scales
          #- tibble
          #- tibbletime
          #- tidytransit
          #- tidyverse
          #- timetk
          #- tsibble
          #- tuber
          #- vroom

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: https://packagemanager.rstudio.com/cran/__linux__/bionic/latest
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      # prevent rgl issues because no X11 display is available
      RGL_USE_NULL: true
      # Begin custom: env vars
      # End custom: env vars

    steps:
      - name: Check rate limits
        run: |
          curl -s --header "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/rate_limit
        shell: bash

      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Install remotes
        run: |
          if (!requireNamespace("curl", quietly = TRUE)) install.packages("curl")
          if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")
        shell: Rscript {0}

      # FIXME: Remove
      - name: Prepare cache keys
        if: runner.os != 'Windows'
        id: date
        run: echo "::set-output name=date::$(date -Ihours)"

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: a
          restore-keys: a

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "18.04")); package <- "${{ matrix.package }}"; deps <- tools::package_dependencies(package, which = "Suggests")[[1]]; lapply(c(package, deps), function(x) { writeLines(remotes::system_requirements("ubuntu", "18.04", package = x)) })' | sort | uniq > .github/deps.sh
          cat .github/deps.sh
          sudo sh < .github/deps.sh

      # Begin custom: before install
      # End custom: before install

      - name: Install package
        run: |
          package <- "${{ matrix.package }}"
          install.packages(package, dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Session info old
        run: |
          options(width = 100)
          if (!requireNamespace("sessioninfo", quietly = TRUE)) install.packages("sessioninfo")
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      # Begin custom: after install
      # End custom: after install

      - name: Check old
        env:
          _R_CHECK_CRAN_INCOMING_: false
          _R_CHECK_SYSTEM_CLOCK_: false
          _R_CHECK_FUTURE_FILE_TIMESTAMPS_: false
        # Avoid downloading binary package from RSPM
        run: |
          package <- "${{ matrix.package }}"
          options(HTTPUserAgent = "gha")
          path <- download.packages(package, destdir = ".github")[, 2]
          print(path)

          dir <- file.path("revdep", package)
          dir.create(dir, showWarnings = FALSE, recursive = TRUE)
          check <- rcmdcheck::rcmdcheck(path, args = c("--no-manual", "--as-cran"), error_on = "never", check_dir = file.path(dir, "old"))
          saveRDS(check, file.path(dir, "old.rds"))
        shell: Rscript {0}

      - name: Install local package
        run: |
          remotes::install_local(".")
        shell: Rscript {0}

      - name: Session info new
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check new
        env:
          _R_CHECK_CRAN_INCOMING_: false
          _R_CHECK_SYSTEM_CLOCK_: false
          _R_CHECK_FUTURE_FILE_TIMESTAMPS_: false
        run: |
          package <- "${{ matrix.package }}"
          path <- dir(".github", pattern = paste0("^", package), full.names = TRUE)[[1]]
          print(path)

          dir <- file.path("revdep", package)
          check <- rcmdcheck::rcmdcheck(path, args = c("--no-manual", "--as-cran"), error_on = "never", check_dir = file.path(dir, "new"))
          saveRDS(check, file.path(dir, "new.rds"))
        shell: Rscript {0}

      - name: Compare
        run: |
          package <- "${{ matrix.package }}"
          dir <- file.path("revdep", package)
          old <- readRDS(file.path(dir, "old.rds"))
          new <- readRDS(file.path(dir, "new.rds"))
          compare <- rcmdcheck::compare_checks(old, new)
          compare
          cmp <- compare$cmp
          if (!identical(cmp[cmp$which == "old", "output"], cmp[cmp$which == "new", "output"])) {
            stop("Check output differs.")
          }
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.package }}-results
          path: revdep/${{ matrix.package }}

      - name: Check rate limits
        if: always()
        run: |
          curl -s --header "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/rate_limit
        shell: bash
