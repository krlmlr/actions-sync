on:
  issue_comment:
    types: [created]
name: Commands
jobs:
  document:
    if: startsWith(github.event.comment.body, '/document')
    name: document
    runs-on: ubuntu-20.04
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      RSPM: https://packagemanager.rstudio.com/cran/__linux__/focal/latest
    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/pr-fetch@master
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: r-lib/actions/setup-r@master
        with:
          install-r: false
      - name: Install dependencies
        run: |
          install.packages(c("remotes", "roxygen2"))
          remotes::install_deps(dependencies = TRUE)
        shell: Rscript {0}
      - name: Document
        run: |
          roxygen2::roxygenise()
        shell: Rscript {0}
      - name: commit
        run: |
          git add man/ NAMESPACE
          git commit -m 'Document'
      - uses: r-lib/actions/pr-push@master
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
  style:
    if: startsWith(github.event.comment.body, '/style')
    name: style
    runs-on: ubuntu-20.04
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      RSPM: https://packagemanager.rstudio.com/cran/__linux__/focal/latest
    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/pr-fetch@master
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: r-lib/actions/setup-r@master
        with:
          install-r: false
      - name: Install dependencies
        run: |
          install.packages("styler")
        shell: Rscript {0}
      - name: Style
        run: |
          styler::style_pkg(strict = FALSE)
        shell: Rscript {0}
      - name: commit
        run: |
          git add '*.R' '*.Rmd'
          git commit -m 'Style'
      - uses: r-lib/actions/pr-push@master
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
  merge:
    if: startsWith(github.event.comment.body, '/merge')
    name: merge
    runs-on: ubuntu-20.04
    steps:
      - name: Create and merge pull request
        run: |
          set -exo pipefail
          PR_DETAILS=$( curl -s --header "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }} )
          echo "$PR_DETAILS" | jq .
          PR_BASE=$(echo "$PR_DETAILS" | jq -r .base.ref)
          PR_HEAD=$(echo "$PR_DETAILS" | jq -r .head.ref)
          PR_URL=$(curl -s -X POST --header "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" --data '{ "head": "'$PR_BASE'", "base": "'$PR_HEAD'", "title": "Merge back PR target branch", "body": "Target: #${{ github.event.issue.number }}" }' https://api.github.com/repos/${{ github.repository }}/pulls | jq -r .url )
          echo $PR_URL
          # Merging here won't run CI/CD
          # curl -s -X PUT --header "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" $PR_URL/merge
  # A mock job just to ensure we have a successful build status
  finish:
    runs-on: ubuntu-20.04
    steps:
      - run: true
