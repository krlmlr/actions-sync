# Adapted from backends.yaml, with contents from odbc/db.yaml
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  schedule:
    - cron:  '0 8 * * *'

name: backends

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2

      # https://github.blog/changelog/2020-04-15-github-actions-new-workflow-features/
      - id: set-matrix
        run: |
          matrix=$((
            echo '{ "include" : ['
            sed -n "/^REVDEP *:= */ { s///; p }" revdep-dev/Makefile | sed 's/ /,\n/g' | grep odbc | sed -r 's/^odbc-([^,]*)(,?)$/{ "database": "\1", "package": "odbc" }\2/'
            echo " ]}"
          ) | jq -c .)
          echo $matrix
          echo $matrix | jq .
          echo "::set-output name=matrix::$matrix"

  check-matrix:
    runs-on: ubuntu-latest
    needs: matrix
    steps:
      - name: Install json2yaml
        run: |
          sudo npm install -g json2yaml

      - name: Check matrix definition
        run: |
          matrix='${{ needs.matrix.outputs.matrix }}'
          echo $matrix
          echo $matrix | jq .
          echo $matrix | json2yaml

  backend:
    needs: matrix
    runs-on: ubuntu-16.04

    services:
      postgres:
        image: postgres
        ports:
        - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2017-latest-ubuntu
        ports:
        - 1433:1433
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Password12

    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.matrix.outputs.matrix)}}

    name: ${{ matrix.package }} ${{ matrix.database }}

    env:
      RSPM: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"
      ODBCSYSINI: ${{ github.workspace }}/.github/odbc
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Check rate limits
        run: |
          curl -s --header "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/rate_limit
        shell: bash

      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1

      - name: Install remotes
        run: |
          if (!requireNamespace("curl", quietly = TRUE)) install.packages("curl")
          install.packages("https://github.com/krlmlr/remotes/archive/f-rate-limit-gh.tar.gz", repos = NULL)
        shell: Rscript {0}

      - name: Clone backend
        run: |
          make -C revdep-dev ${{ matrix.package }}

      - name: Prepare cache keys
        if: runner.os != 'Windows'
        run: |
          saveRDS(remotes::dev_package_deps("revdep-dev/${{ matrix.package }}", dependencies = TRUE, type = .Platform$pkgType), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: backends-${{ hashFiles('.github/R-version') }}-2-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: backends-${{ hashFiles('.github/R-version') }}-2-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "16.04", path = "revdep-dev/${{ matrix.package }}"))')

      - name: Install package and dependencies
        run: |
          if (!requireNamespace("curl", quietly = TRUE)) install.packages("curl")

          remotes::install_local("revdep-dev/${{ matrix.package }}", dependencies = TRUE, type = .Platform$pkgType)
          remotes::install_local(".", type = .Platform$pkgType)
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          if (!requireNamespace("sessioninfo", quietly = TRUE)) install.packages("sessioninfo")
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      # Begin custom: after install
      - name: Setup MySQL
        if: matrix.database == 'MySQL'
        run: |
          sudo systemctl start mysql.service
          mysql -uroot -h127.0.0.1 -proot -e 'CREATE DATABASE `test`;'
          .github/odbc/install-mariadb-driver.sh

      - name: Install SQLite Driver
        if: matrix.database == 'SQLite'
        run: |
          sudo apt-get install -y libsqliteodbc

      - name: Install PostgreSQL Driver
        if: matrix.database == 'PostgreSQL'
        run: |
          sudo apt-get install -y unixodbc-dev odbc-postgresql devscripts

      - name: Install SQL Server Driver
        if: matrix.database == 'SQLServer'
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list > /etc/apt/sources.list.d/mssql-release.list
          apt-get update
          ACCEPT_EULA=Y apt-get install -y msodbcsql17
          ln -s /opt/microsoft/msodbcsql17/lib64/libmsodbcsql-17.*.so.* /opt/microsoft/msodbcsql17/lib64/libmsodbcsql-17.so
        shell: sudo bash {0}

      - name: Install locally to avoid error with test_local()
        run: |
          R CMD INSTALL .
        env:
          LIB_DIR: /usr/lib/x86_64-linux-gnu/
          INCLUDE_DIR: /usr/include
      # End custom: after install

      - name: Test backend
        run: |
          make -C revdep-dev test-${{ matrix.package }}-${{ matrix.database }}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: revdep-dev/${{ matrix.package }}

      - name: Check rate limits
        if: always()
        run: |
          curl -s --header "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/rate_limit
        shell: bash
