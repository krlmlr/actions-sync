# NOTE: This workflow is overkill for most R packages
# check-standard.yaml is likely a better choice
# usethis::use_github_action("check-standard") will install it.
#
# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  schedule:
    - cron:  '0 8 * * *'

name: backends

jobs:
  backend:
    runs-on: ubuntu-20.04

    name: ${{ matrix.package }}

    strategy:
      fail-fast: false
      matrix:
        package:
          - RSQLite
          - RMariaDB
          - RPostgres
          - RKazam

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1

      - name: Install remotes
        run: |
          if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")
          if (!requireNamespace("curl", quietly = TRUE)) install.packages("curl")
          install.packages("https://github.com/krlmlr/remotes/archive/f-rate-limit-gh.tar.gz", repos = NULL)
        shell: Rscript {0}

      - name: Clone backend
        run: |
          make -C revdep-dev ${{ matrix.package }}

      - name: Prepare cache keys
        if: runner.os != 'Windows'
        run: |
          saveRDS(remotes::dev_package_deps("revdep-dev/${{ matrix.package }}", dependencies = TRUE, type = .Platform$pkgType), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: backends-${{ hashFiles('.github/R-version') }}-2-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: backends-${{ hashFiles('.github/R-version') }}-2-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "16.04", path = "revdep-dev/${{ matrix.package }}"))')

      - name: Install package and dependencies
        run: |
          install.packages("https://github.com/krlmlr/remotes/archive/f-rate-limit-gh.tar.gz", repos = NULL)
          if (!requireNamespace("curl", quietly = TRUE)) install.packages("curl")

          remotes::install_local("revdep-dev/${{ matrix.package }}", dependencies = TRUE, type = .Platform$pkgType)
          remotes::install_local(".", type = .Platform$pkgType)
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          if (!("sessioninfo" %in% pkgs)) install.packages("sessioninfo")
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      # Begin custom: after install
      # Must happen after installing system dependencies,
      # https://github.com/ankane/setup-mariadb/issues/2
      - uses: ankane/setup-mariadb@v1
        if: matrix.package == 'RMariaDB'
        with:
          mariadb-version: 10.5

      - name: Create database, set it to UTF-8
        if: matrix.package == 'RMariaDB'
        run: |
          mysql -e "CREATE DATABASE IF NOT EXISTS test; ALTER DATABASE test CHARACTER SET 'utf8'; FLUSH PRIVILEGES;"

      - uses: ankane/setup-postgres@v1
        if: matrix.package == 'RPostgres'
        with:
          postgres-version: 13

      - name: Create database
        if: (runner.os != 'Windows') && (matrix.package == 'RPostgres')
        run: |
          createdb ${USER}

      - name: Create database
        if: (runner.os == 'Windows') && (matrix.package == 'RPostgres')
        run: |
          createdb ${USERNAME}
        shell: bash
      # End custom: after install

      - name: test
        run: |
          make -C revdep-dev test-${{ matrix.package }}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: revdep-dev/${{ matrix.package }}
